import request from 'request';

const showLogMessages = process.env.NODE_DEBUG ? process.env.NODE_DEBUG.indexOf('apidoc') !== -1 : false;
const enums = JSON.parse('{{{enumsJson}}}');
const unions = JSON.parse('{{{unionsJson}}}');

export function getRequestOptions (settings, userOptions) {
  return new Promise ((resolve, reject) => {
    if (!isObject(userOptions || {})) {
      reject(new Error('options parameter is required and must be a plain object'));
      return;
    }

    // Don't mutate the options the user provided
    var options = Object.assign({}, userOptions);

    // Handle the body of the request (options.data as provided by the user)
    if (settings.requiresBody) {
      if (!options.data) {
        return Promise.reject(new Error('options.data property is required.'));
      }

      if (settings.discriminator) {
        if(dataIsAndCanBePrimitive(settings.bodyType, options.data)) {
          options.data[settings.discriminator] = getApidocTypeForPrimitive(settings.bodyType, options.data);
          options.data.value = options.data;
        }

        if (!options.data[settings.discriminator]) {
          return Promise.reject(new Error(`options.data.${settings.discriminator} must be defined. Available options for [${settings.bodyType}] are: ${getTypesForUnion(settings.bodyType).join(', ')}`));
        }
      }
    }

    var qs = {};
    settings.queryParams.forEach((param) => {
        qs[param.name] = options[param.nameCamelCase];
    });

    const json = settings.isApplicationJson ? options.data : undefined;
    const form = settings.isFormUrlEncoded ? options.data : undefined;
    const method = settings.method;

    return {
      json,
      form,
      method,
      qs
    };
  });
}

export function dataIsAndCanBePrimitive (bodyType, data) {
  const typesForUnion = getTypesForUnion(bodyType);
  const dataType = typeof data;

  if (dataType === 'string') {
    return typesForUnion.indexOf('string') != -1;
  } else if (dataType === 'number') {
    return typesForUnion.indexOf('decimal') != -1
      || typesForUnion.indexOf('double') != -1
      || typesForUnion.indexOf('integer') != -1
      || typesForUnion.indexOf('long') != -1;
  } else {
    return false;
  }
}

export function getApidocTypeForPrimitive (bodyType, data) {
  const typesForUnion = getTypesForUnion(bodyType);
  const dataType = typeof data;

  if (dataType === 'string') {
    // Check if data matches an enum. Use the enum name if it does.
    const enumForData = enums.find((e) => e.values.indexOf(data));

    if (enumForData) {
        return enumForData.name;
    }

    // default to 'string'
    return dataType;
  } else if (dataType === 'number') {
    // Return the first one found. Buggy in that this code should know the
    // difference between each of the apidoc types. They are all 'number' in
    // JavaScript though.
    return typesForUnion.find((t) => {
      return t === 'decimal' || t === 'double'|| t === 'integer' || t === 'long';
    });
  }
}

export function requiresDiscriminator (bodyType) {
  const isUnionType = unions.find((u) => u.name === bodyType);
  return !!isUnionType;
}

export function getTypesForUnion (unionType) {
   const ut = unions.find((u) => u.name === unionType);
   if (ut) {
     return ut.types.map((t) => t.type);
   }

   return [];
}

/**
 * Simple plain object check. This is actually really involved to be 100%
 * accurate
 */
export function isObject (obj) {
  return typeof obj === 'object' && !Array.isArray(obj);
}

function log (message) {
  if (showLogMessages) {
    console.log('[apidoc] ' + message);
  }
}

function getQueryString (options) {
  var params = [];
  var qs = options.qs || {};

  for (var key in qs) {
    if (qs[key]) {
      params.push(key + '=' + qs[key]);
    }
  }

  return params.join('&');
}

export function doRequest (options) {
  var startMs = Date.now();
  options = options || {};

  options.qsStringifyOptions = {
    arrayFormat: 'repeat'
  };

  var queryString = getQueryString(options);
  var url = options.uri + (queryString ? '?' + queryString : '');

  log(options.method + ' ' + url);
  if (options.method === 'POST' || options.method === 'PUT' || options.method === 'PATCH') {
    log('|--> With body:\n\t\t' + JSON.stringify(options.json));
  }

  return new Promise(function (resolve, reject) {
    request(options, function (err, response) {
      if (err) {
        reject(err);
        return;
      }

      var duration = Date.now() - startMs;
      var requestHref = response.request ? response.request.href : '<unknown url>';

      log('Completed ' + options.method + ' ' + requestHref + ' ' + response.statusCode + ' ' + duration + 'ms');

      resolve(response);
    });
  });
}
