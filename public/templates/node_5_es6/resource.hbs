import { isObject, doRequest } from './utils';

export default class {
  constructor (host, auth, headers) {
    console.log('Resource constucted with', host, auth, headers);
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  {{#operations}}
    {{functionName}} ({{{functionParams}}}) {
      {{#if requiresOptions}}
      // if options is not defined, set it
      options = options || {};

      // otherwise if it's not the kind of object we want...
      if (!isObject(options)) {
        return Promise.reject(new Error('options parameter is required and must be a plain object'));
      }
      {{/if}}

      {{#if requiresBody}}
      if (!options.data) {
        return Promise.reject(new Error('options.data property is required.'));
      }
      
        {{#if discriminator}}
      if (!options.data.{{discriminator}}) {
        return Promise.reject(new Error('options.data.{{discriminator}} must be defined'));
      }
        {{/if}}
      {{/if}}

      const url = `${this.host}{{{endpointUriStr}}}`;
      const queryString = {
        {{#queryParams}}
        {{name}}: options.{{nameCamelCase}},
        {{/queryParams}}
      };
      const requestOpts = {
        auth: this.auth,
        qs: queryString,
        {{#if isApplicationJson}}
        json: options.data,
        {{/if}}
        {{#if isFormUrlEncoded}}
        form: options.data,
        {{/if}}
        uri: url,
        method: '{{method}}'
      };

      return doRequest(requestOpts).then(function (serverResponse) {
        switch (serverResponse.statusCode) {
          {{#responses}}
          case {{code}}:
            {{#if isResolve}}
              {{#if isUnitType}}
            return Promise.resolve();
              {{else}}
            if (requestOpts.json) {
              return Promise.resolve(serverResponse.body);
            } else {
              return Promise.resolve(JSON.parse(serverResponse.body));
            }
              {{/if}}
            {{else}}
            return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            {{/if}}
          {{/responses}}
          default:
            return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
        }
      });
    }

  {{/operations}}
}
